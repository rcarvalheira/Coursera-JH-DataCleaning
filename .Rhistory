DT[,SEX:= as.numeric()]
DT[,SEX:= as.numeric(SEX)]
str(DT)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
tempURL <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
a <- xmlParse(tempURL)
a <- xmlParse(tempURL)
for (i in 1:1327){
b <- xmlValue(xmlRoot(a)[[1]][[i]][[2]])
}
for (i in 1:1327){
b <- xmlValue(xmlRoot(a)[[1]][[i]][[2]])
}
xmlSize(a)
length(xmlChildren(a))
b <- xmlSApply(a, xmlGetAttr, "zipcode")
?rcurl
library(RCurl)
b <- xmlSApply(a, xmlGetAttr, "zipcode")
?rcurl
?xmlParse
b <- xpathSApply(a, xmlGetAttr, "zipcode")
b <- getNodeSet(a, "//ns:zipcode")
b <- getNodeSet(a, "//ns:zipcode", namespaces)
b <- xmlToDataFrame(a)
b <- xmlToList(a)
head(b[[2])
head(b[[2]})
head(b[[2]])
head(b$zipcode)
b <- xmlToDataFrame(a)
b[1,1]
?XML
?xmlSApply
a[[1]][[1]][[2]]
xmlRoot(a)[[1]][[1]][[2]]
b <- xmlSApply(xmlRoot(a)[[1]][[1]][[2]],xmlValue)
b <- for (i in 1>1327)xmlSApply(xmlRoot(a)[[1]][[i]][[2]],xmlValue)
b <- for (i in 1:1327)xmlSApply(xmlRoot(a)[[1]][[i]][[2]],xmlValue)
b <- xmlSApply(xmlRoot(a)[[1]][[i]][[2]],xmlValue)
b
b <- xpathSApply(xmlRoot(a), "//zipcode", xmlValue)
head(b)
a <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
sum(b[b == "21231"])
sum(b == "21231")
b
DT <- fread("week1_quizz1_q05.csv")
DT
pwgtp15
dt$pwgtp15
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
DT[,SEX:= as.numeric(SEX)]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(replicate(1000,mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
DT[,SEX:= as.numeric(SEX)]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(replicate(1000,mean(DT$pwgtp15,by=DT$SEX)))
system.time(replicate(10000,mean(DT$pwgtp15,by=DT$SEX)))
?system.time
system.time(replicate(10000,mean(DT$pwgtp15,by=DT$SEX)))
system.time(replicate(10000,sapply(split(DT$pwgtp15,DT$SEX),mean)))
system.time(replicate(1000,mean(DT$pwgtp15,by=DT$SEX)))
system.time(replicate(1000,sapply(split(DT$pwgtp15,DT$SEX),mean)))
system.time(replicate(1000,rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2]))
system.time(replicate(1000,tapply(DT$pwgtp15,DT$SEX,mean)))
system.time(replicate(1000,DT[,mean(pwgtp15),by=SEX]))
system.time(replicate(1000,mean(DT[DT$SEX==1,]$pwgtp15), mean(DT[DT$SEX==2,]$pwgtp15)))
a <- Sys.time()
rowMeans(DT)[DT$SEX==1]
rowMeans(DT)[DT$SEX==2]
Sys.time()-a
system.time(replicate(1000,mean(DT$pwgtp15,by=DT$SEX)))
system.time(replicate(1000,sapply(split(DT$pwgtp15,DT$SEX),mean)))
#system.time(replicate(1000,rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]))
system.time(replicate(1000,tapply(DT$pwgtp15,DT$SEX,mean)))
system.time(replicate(1000,DT[,mean(pwgtp15),by=SEX]))
install.packages("RMySQL")
library(RMySQL)
myconnection <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(myconnection,"show databases;"); dbDisconnect(myconnection)
View(result)
View(result)
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
result <- dbListTables(hg19)
length(allTables)
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * affyU133Plus2 where misMatches between 1 and 3")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
warnings()
affyMis <- fetch(query); quantile(affyMiss$misMatches)
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMissSmall <- fetch(query, n10); dbClearResult(query)
affyMissSmall <- fetch(query, n=10); dbClearResult(query)
dim(affyMissSmall)
View(affyMissSmall)
View(affyMissSmall)
dbDisconnect(hg19)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
dbDisconnect(hg19)
dbClearResult(query)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("exemple.h5","foo")
created = h5createGroup("exemple.h5","baa")
created = h5createGroup("exemple.h5","foo/foobaa")
h5dls("example.h5")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5dls("example.h5")
h5ls("example.h5")
con = url("http://www.ig.com.br")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
library(httr)
html2 = GET("http://www.ig.com.br")
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2, asText = TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
xpathSApply(parsedHtml, "//*[@id="ad_.*"]", xmlValue)
xpathSApply(parsedHtml, '//*[@id="ad_.*"]', xmlValue)
xpathSApply(parsedHtml, '//*[@id="ad_".*]', xmlValue)
xpathSApply(parsedHtml, '//*[@id="ad_"'.*]', xmlValue)
xpathSApply(parsedHtml, '//*[@id="ad_"'.*']', xmlValue)
myapp = oauth_app("twitter",
key="ucrhdz7tGijGVwjOFTLVZYmKM",
secret="mV5ZyvAdSmaG9MaFPazZD73f9gITVweM3x0XKpxMuUbaMOq9G")
myapp = oauth_app("twitter",
key="ucrhdz7tGijGVwjOFTLVZYmKM",
secret="mV5ZyvAdSmaG9MaFPazZD73f9gITVweM3x0XKpxMuUbaMOq9G")
sig = sign_oauth1.0(myapp,
token = "Ctp54fIl4hTqYLEflvLXhHUGrDF223OItgeDMjvCy",
token_secret = "gj0ApLBM0DOFSP1p7z2hpgY6GS9or0tWHoCxAR1OkJKzy")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
myapp = oauth_app("twitter",
key="ucrhdz7tGijGVwjOFTLVZYmKM",
secret="mV5ZyvAdSmaG9MaFPazZD73f9gITVweM3x0XKpxMuUbaMOq9G")
sig = sign_oauth1.0(myapp,
token = "Ctp54fIl4hTqYLEflvLXhHUGrDF223OItgeDMjvCy",
token_secret = "gj0ApLBM0DOFSP1p7z2hpgY6GS9or0tWHoCxAR1OkJKzy")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
myapp = oauth_app("twitter",
key="ucrhdz7tGijGVwjOFTLVZYmKM",
secret="mV5ZyvAdSmaG9MaFPazZD73f9gITVweM3x0XKpxMuUbaMOq9G")
sig = sign_oauth1.0(myapp,
token = "14999155-Ctp54fIl4hTqYLEflvLXhHUGrDF223OItgeDMjvCy",
token_secret = "gj0ApLBM0DOFSP1p7z2hpgY6GS9or0tWHoCxAR1OkJKzy")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
myapp = oauth_app("twitter",
key="ucrhdz7tGijGVwjOFTLVZYmKM",
secret="mV5ZyvAdSmaG9MaFPazZD73f9gITVweM3x0XKpxMuUbaMOq9Gi")
sig = sign_oauth1.0(myapp,
token = "14999155-Ctp54fIl4hTqYLEflvLXhHUGrDF223OItgeDMjvCy",
token_secret = "gj0ApLBM0DOFSP1p7z2hpgY6GS9or0tWHoCxAR1OkJKzy")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
View(json2)
View(json2)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
?connections
oauth_endpoints("github")
myapp <- oauth_app("github",
key="761f3e8b51767d1d60ba",
secret="197aa3d8ecbb3a4869cd1c9826a99d6218a3e0fa")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
library(httr)
myapp <- oauth_app("github",
key="761f3e8b51767d1d60ba",
secret="197aa3d8ecbb3a4869cd1c9826a99d6218a3e0fa")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
stop_for_status(req)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key="761f3e8b51767d1d60ba",
secret="197aa3d8ecbb3a4869cd1c9826a99d6218a3e0fa")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
client_id="761f3e8b51767d1d60ba",
client_secret="197aa3d8ecbb3a4869cd1c9826a99d6218a3e0fa")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
myapp <- oauth_app("github",
key="761f3e8b51767d1d60ba",
secret="197aa3d8ecbb3a4869cd1c9826a99d6218a3e0fa")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","w2q2.csv")
read.csv("w2q2.csv")
data <- read.csv("w2q2.csv")
library(RMySQL)
acs <- read.csv("w2q2.csv")
acs <- read.csv("w2q2.csv")
sqldf("select * from acs where AGEP < 50")
library(sqldf)
install.packages("sqldf")
library(sqldf)
sqldf("select * from acs where AGEP < 50")
View(acs)
View(acs)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
length(htmlCode[10])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
fort <- read.fortran("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
?read.fortran
fort <- read.fortran("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", format = "list")
fort <- read.fortran("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", format = "vector")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for","w2q05,for")
fort <- read.fortran("w2q05,for", format = "vector")
?read.fortran
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for","w2q05.for")
fort <- read.fortran("w2q05,for", format="8F1.0", skip = 2)
fort <- read.fortran("w2q05.for", format="8F1.0", skip = 2)
fort <- read.table("w2q05.for", skip = 2)
fort <- read.table("w2q05.for", skip = 3)
fort <- read.table("w2q05.for", skip = 4)
fort <- read.table("w2q05.for")
:read.table
?read.table
fort <- read.fwf("w2q05.for")
fort <- read.fwf("w2q05.for", skip = 3, widths = c(12, 8, 4, 7, 4,9,4,9,4))
View(fort)
View(fort)
fort <- read.fwf("w2q05.for", skip = 3, widths = c(12, 7, 4, 7, 4,9,4,9,4))
fort <- read.fwf("w2q05.for", skip = 3, widths = c(12, 7, 4, 9, 4,9,4,9,4))
fort <- read.fwf("w2q05.for", skip = 3, widths = c(12, 7, 4, 9, 4,9,4,9,4), header = TRUE)
fort <- read.fwf("w2q05.for", skip = 4, widths = c(12, 7, 4, 9, 4,9,4,9,4))
sum(fort$V4)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
fort <- read.fwf("w2q05.for", skip = 4, widths = c(12, 7, 4, 9, 4,9,4,9,4))
sum(fort$V4)
class(x <- c(4, TRUE))
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
A key property of vectors in R is that
x[[1]]
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
class(x <- 4L)
class( x <- c(4, "a", TRUE))
x <- c(1,3, 5)
rbind(x,y)
x <- 1:4
y <- 2:3
x+y
class(x+y)
x <- c(3, 5, 1, 10, 12, 6)
x[x %in% 1:5] <- 0
?dcast
reshape2::dcast()
install.packages("reshape2")
library(reshape2)
?dcast
install.packages("swirl")
?ave
install.packages("rechape")
?acast
library(dplyr)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl
swirl()
read.csv(path2csv, stringsAsFactors = TRUE)
mydf <- read.csv(path2csv, stringsAsFactors = TRUE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df()
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
select(cran,-5:20)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country="US")
filter(cran, r_version == "3.1.1", country=="US")
?comparison
?Comparison
filter(cran, r_version <= "3.0.2", country=="IN")
filter(cran, country == "us" | country == "in")
filter(cran, country == "US" | country == "IN")
filter(cran, size >100500, r_os == "linux-gnu")
is.na(c(3,5,na,10))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version) )
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_Size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(tidyr)
rm(cran)
rm(cran2)
rm(cran3)
students
?gather
gather(students, sex, count, -grade)
gather(students, sex, count, grade)
gather(students, grade, sex, count)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c(sex,class), sep = "_")
separate(res, sex_class, c("sex","class"), sep = "_")
separate(res, sex_class, c("sex","class"))
?chain
submit()
students3
submit()
submit()
?gather
submit()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
?mutate
submit()
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
swirl()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class <- parse_number(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(parse_number(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = parse_number(class))
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
passed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?select
submit()
? separate
submit()
submit()
submit()
submit()
library(dplyr)
exists()
f
exit
swirl
cran <- tbl_df(mydf)
test
cran <- tbl_df(mydf)
swirl
setwd("/Users/Rafael/Documents/GitHub/Coursera-JH-DataCleaning")
library(data.table)
library(dplyr)
files <- list.files("./UCI HAR Dataset", recursive = TRUE)
files <- files[c(1:2,5:length(files))]
filenames <- gsub("(^.*/|\\.txt)","",files)
for ( i in 1:length(files)){
try(assign(filenames[i], fread(paste("./UCI HAR Dataset/",files[i],sep=""), sep = "auto")))
}
categories <- unique(gsub("_t.*$","",filenames[3:length(filenames)]))
for (i in 1:length(categories)){
assign(categories[i],
rbindlist(
list(
eval(
as.name(
paste(categories[i],"_train",sep = "")
)
)
,eval(
as.name(
paste(categories[i],"_test",sep = "")
)
)
)
)
)
}
rm(list = filenames[grepl("(test|train)",filenames)])
names(X) <- t(features$V2)
y <- y[activity_labels,on="V1"]
X[,c("subject", "activity"):= .(subject[,V1], y[,V2])]
signals <- categories[grepl("(acc|gyro)",categories)]
for ( i in 1:length(signals)){
X[,c(paste(signals[i],"-mean", sep="")
,paste(signals[i],"-std", sep="")):= .(rowMeans(eval(as.name(signals[i])))
,apply(eval(as.name(signals[i]))[],1,sd))]
}
names(X) <- X[,gsub("[Aa]cc","Acceleration",names(X))]
names(X) <- X[,gsub("[Gg]yro","Gyroscope",names(X))]
X$subject <- X[,as.factor(subject)]
X$activity <- X[,as.factor(activity)]
tidy_data <- X[,lapply(X,mean),by=.(subject,activity)]
tidy_data[,c(564,565):=NULL]
write.table(tidy_data,"tidy_data.csv", row.name=FALSE)
write.table(tidy_data,"tidy_data.txt", row.name=FALSE)
